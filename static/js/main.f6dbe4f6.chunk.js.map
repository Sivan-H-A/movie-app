{"version":3,"sources":["components/HeaderActorPage/HeaderActorPage.js","components/ActorCard/ActorCard.js","components/Actors/Actors.js","pages/ActorPage/ActorPage.js","model/ActorModel.js","App.js","reportWebVitals.js","index.js"],"names":["HeaderActorPage","onFilterChange","onSortChange","Form","className","Row","Col","Label","Control","type","onChange","e","target","value","as","ActorCard","actor","Card","style","width","Img","variant","src","img","Body","Title","href","imdb","fname","lname","Text","age","Actors","actorsCards","filterBy","sortBy","actors","filter","toLowerCase","includes","sort","a","b","toUpperCase","localeCompare","map","ActorPage","React","useState","filterText","setFilterText","setSortBy","Container","data","ActorModel","plainActor","bday","this","getAge","dateString","today","Date","birthDate","getFullYear","m","getMonth","getDate","App","setActors","useEffect","axios","get","then","res","newActors","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6dbe4f6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Col, Form } from 'react-bootstrap';\r\nimport './HeaderActorPage.css';\r\n\r\nexport default function HeaderActorPage({onFilterChange, onSortChange}) {\r\n    return (\r\n        <Form className=\"p-actor-header\">\r\n            <Form.Row>\r\n                <Col>               \r\n                    <Form.Label>Filter by:</Form.Label>  \r\n                    <Form.Control type=\"text\" onChange={(e)=>onFilterChange(e.target.value)}/>\r\n                </Col>\r\n                <Col>\r\n                    <Form.Label>Sort by:</Form.Label>\r\n                    <Form.Control as=\"select\" onChange={(e)=>onSortChange(e.target.value)}>\r\n                        <option value=\"fname\">First Name</option>\r\n                        <option value=\"lname\">Last Name</option>\r\n                        <option value=\"age\">Age</option>\r\n                    </Form.Control>\r\n                </Col>\r\n            </Form.Row>                \r\n        </Form>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Card } from 'react-bootstrap'\r\nimport './ActorCard.css';\r\n\r\nexport default function ActorCard({actor}) {\r\n    return (\r\n            <Card style={{ width: '18rem'}} className=\"col-sm-6 col-md-3 c-actor-card\">\r\n                <Card.Img variant=\"top\" src={actor.img}/>\r\n                <Card.Body>\r\n                    <Card.Title>\r\n                        <a href={actor.imdb} target=\"_blank\">\r\n                            {`${actor.fname} ${actor.lname}`}\r\n                        </a>\r\n                    </Card.Title>\r\n                    <Card.Text>\r\n                        {actor.age}\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {CardGroup, CardDeck } from 'react-bootstrap';\r\nimport ActorCard from '../ActorCard/ActorCard';\r\nimport './Actors.css'\r\nexport default function Actors({filterBy, sortBy, actors}) {\r\n    let actorsCards;\r\n\r\n    if(actors){\r\n        if(filterBy){\r\n            actors = actors.filter(actor=> actor.fname.toLowerCase().includes(filterBy.toLowerCase()) || \r\n                                            actor.lname.toLowerCase().includes(filterBy.toLowerCase()));               \r\n        }\r\n        if(sortBy){\r\n            actors.sort(function(a,b){\r\n                switch (sortBy){\r\n                    case \"fname\":\r\n                    case \"lname\":\r\n                        return a[sortBy].toUpperCase().localeCompare(b[sortBy].toUpperCase());\r\n                    case \"age\":\r\n                        return b.age-a.age;\r\n\r\n                }\r\n            })\r\n        }\r\n        if(actors)\r\n            actorsCards = actors.map(actor=><ActorCard actor={actor}/>);\r\n    }\r\n    return (\r\n            <div className=\"actors-cards\">\r\n                {actorsCards}\r\n            </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport HeaderActorPage from '../../components/HeaderActorPage/HeaderActorPage'\r\nimport { Container } from 'react-bootstrap'\r\nimport Actors from '../../components/Actors/Actors';\r\n\r\nexport default function ActorPage({actors}) {\r\n    const [filterText, setFilterText] = React.useState(\"\");\r\n    const [sortBy, setSortBy] = React.useState(\"fname\");\r\n\r\n    function filterTextChange(data){\r\n        setFilterText(data);\r\n    }\r\n    function sortByChange(data){\r\n        setSortBy(data);\r\n    }\r\n    return (\r\n        <Container>\r\n            <HeaderActorPage onFilterChange={filterTextChange} onSortChange={sortByChange}/>\r\n            <Actors filterBy={filterText} sortBy={sortBy} actors={actors}/>\r\n        </Container>\r\n    )\r\n}\r\n","\r\nclass ActorModel{\r\n    constructor(plainActor, lname, bday, img, imdb){\r\n        if(typeof plainActor==='object'){\r\n            this.fname = plainActor.fname;\r\n            this.lname = plainActor.lname;\r\n            this.bday = plainActor.bday;\r\n            this.img = plainActor.img;\r\n            this.imdb = plainActor.imdb;\r\n        } else{\r\n            this.fname = plainActor;\r\n            this.lname = lname;\r\n            this.bday = bday;\r\n            this.img = img;\r\n            this.imdb = imdb;\r\n        }\r\n        this.age = this.getAge(this.bday);\r\n    }\r\n\r\n    getAge(dateString) {\r\n        var today = new Date();\r\n        var birthDate = new Date(dateString);\r\n        var age = today.getFullYear() - birthDate.getFullYear();\r\n        var m = today.getMonth() - birthDate.getMonth();\r\n        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n            age--;\r\n        }\r\n        return age;\r\n    }\r\n}\r\nexport default ActorModel","import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport ActorPage from \"./pages/ActorPage/ActorPage\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ActorModel from './model/ActorModel';\nimport './App.css';\n\nfunction App() {\n  const [actors, setActors] = useState(null);\n\n  useEffect(()=>{\n    axios.get(\"actors.json\").then(res=>{\n        const newActors = res.data.map(plainActor => new ActorModel(plainActor));\n        setActors(newActors);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <ActorPage actors={actors}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}